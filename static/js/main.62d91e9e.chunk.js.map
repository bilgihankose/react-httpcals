{"version":3,"sources":["Components/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["UserForm","props","react_default","a","createElement","onSubmit","getUser","style","margin","display","type","name","App","state","e","preventDefault","user","target","elements","username","value","axios","get","concat","then","res","data","avatar_url","company","location","followers","following","console","log","_this","setState","className","Components_UserForm","this","src","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAWeA,SATE,SAACC,GAChB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,SACpBJ,EAAAC,EAAAC,cAAA,SAAOG,MAAO,CAAEC,OAAO,YAAaC,QAAQ,SAAWC,KAAK,OAAOC,KAAK,aACxET,EAAAC,EAAAC,cAAA,2BC4CSQ,6MA1CbC,MAAQ,KAIRP,QAAU,SAACQ,GACTA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OAAOC,SAASC,SAASC,MACpCJ,GACFK,IAAMC,IAAN,gCAAAC,OAA0CP,IACzCQ,KAAK,SAACC,GACL,IAAMd,EAAOc,EAAIC,KAAKf,KAChBgB,EAAaF,EAAIC,KAAKC,WACtBC,EAAUH,EAAIC,KAAKE,QACnBC,EAAWJ,EAAIC,KAAKG,SACpBC,EAAYL,EAAIC,KAAKI,UACrBC,EAAYN,EAAIC,KAAKK,UAC7BC,QAAQC,IAAItB,EAAMgB,EAAYC,EAASC,EAAUC,EAAYC,GAC7DG,EAAKC,SAAS,CACZxB,OAAMgB,aAAYC,UAASC,WAAUC,YAAWC,yFAKpD,OACE7B,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,UAAQgC,UAAU,cAChBlC,EAAAC,EAAAC,cAAA,MAAIgC,UAAU,aAAd,wBAEJlC,EAAAC,EAAAC,cAAA,mCACEF,EAAAC,EAAAC,cAACiC,EAAD,CAAU/B,QAAUgC,KAAKhC,UACpBgC,KAAKzB,MAAMF,KAAOT,EAAAC,EAAAC,cAAA,kBAAWkC,KAAKzB,MAAMF,MAAaT,EAAAC,EAAAC,cAAA,qCACvDF,EAAAC,EAAAC,cAAA,OAAKmC,IAAKD,KAAKzB,MAAMc,aACzBzB,EAAAC,EAAAC,cAAA,SAAKkC,KAAKzB,MAAMe,SAChB1B,EAAAC,EAAAC,cAAA,SAAKkC,KAAKzB,MAAMgB,UAChB3B,EAAAC,EAAAC,cAAA,uBAAgBkC,KAAKzB,MAAMiB,WAC3B5B,EAAAC,EAAAC,cAAA,uBAAgBkC,KAAKzB,MAAMkB,mBApChBS,aCKEC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.62d91e9e.chunk.js","sourcesContent":["import React from 'react';\n\nconst UserForm = (props) => {\n  return (\n    <form onSubmit={props.getUser}>\n      <input style={{ margin:\"20px auto\", display:\"block\" }} type=\"text\" name=\"username\"/>\n      <button>Submit</button>\n    </form>\n  );\n}\n\nexport default UserForm;\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\n\nimport UserForm from \"./Components/UserForm\";\n\nclass App extends Component {\n  state = {\n    }\n\n\n  getUser = (e) => {\n    e.preventDefault();\n    const user = e.target.elements.username.value;\n    if (user) {\n      axios.get(`https://api.github.com/users/${user}`)\n      .then((res) => {\n        const name = res.data.name;\n        const avatar_url = res.data.avatar_url;\n        const company = res.data.company;\n        const location = res.data.location;\n        const followers = res.data.followers;\n        const following = res.data.following;\n      console.log(name, avatar_url, company, location, followers,  following );\n      this.setState({\n        name, avatar_url, company, location, followers, following});\n      })\n    } else return;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">HTTP Calls in React</h1>\n        </header>\n      <h1>GitHub Profile Finder</h1>\n        <UserForm getUser= {this.getUser} />\n           { this.state.name ? <p>Name: { this.state.name }</p> : <p>Please enter a username.</p> }\n           <img src={this.state.avatar_url}></img>\n       <p>{ this.state.company }</p>\n       <p>{ this.state.location }</p>\n       <p>Followers: { this.state.followers }</p>\n       <p>Following: { this.state.following }</p>\n      \n       </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}